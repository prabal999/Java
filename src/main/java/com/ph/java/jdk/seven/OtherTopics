1. nio 2 package for File IO.
2. Fork and Join for parallel core .
3. JDBC class improvement 

https://www.oreilly.com/learning/java7-features
https://www.javatpoint.com/java-7-jdbc-improvement

New file system API (NIO 2.0)
Those who worked with Java IO may still remember the headaches that framework caused. It was never easy to work seamlessly across operating systems or multi-file systems. There were methods such as delete or rename that behaved unexpected in most cases. Working with symbolic links was another issue. In an essence, the API needed an overhaul.

With the intention of solving the above problems with Java IO, Java 7 introduced an overhauled and in many cases new API.

The NIO 2.0 has come forward with many enhancements. It’s also introduced new classes to ease the life of a developer when working with multiple file systems.

Working with Path
A new java.nio.file package consists of classes and interfaces such as Path, Paths, FileSystem, FileSystems and others.

A Path is simply a reference to a file path. It is the equivalent (and with more features) to java.io.File. The following snippet shows how to obtain a path reference to the “temp” folder:


public voidpathInfo() {

            Path path= Paths.get("c:\Temp\temp");

System.out.println("Number of Nodes:"+ path.getNameCount());

            System.out.println("File Name:"+ path.getFileName());

            System.out.println("File Root:"+ path.getRoot());

            System.out.println("File Parent:"+ path.getParent());

      }
The console output would be:


Number of Nodes:2

File Name:temp.txt

File Root:c:

File Parent:c:Temp
Deleting a file or directory is as simple as invoking a delete method on Files (note the plural) class. The Files class exposes two delete methods, one that throws NoSuchFileException and the other that does not.

The following delete method invocation throws NoSuchFileException, so you have to handle it:


Files.delete(path);
Where as Files.deleteIfExists(path) does not throw exception (as expected) if the file/directory does not exist.

You can use other utility methods such as Files.copy(..) and Files.move(..) to act on a file system efficiently. Similarly, use the createSymbolicLink(..) method to create symbolic links using your code.

File change notifications
One of my favorite improvements in the JDK 7 release is the addition of File Change Notifications. This has been a long-awaited feature that’s finally carved into NIO 2.0. The WatchService API lets you receive notification events upon changes to the subject (directory or file).

The steps involved in implementing the API are:

Create a WatchService. This service consists of a queue to hold WatchKeys
Register the directory/file you wish to monitor with this WatchService
While registering, specify the types of events you wish to receive (create, modify or delete events)
You have to start an infinite loop to listen to events
When an event occurs, a WatchKey is placed into the queue
Consume the WatchKey and invoke queries on it
Let’s follow this via an example. We create a DirPolice Java program whose responsibility is to police a particular directory. The steps are provided below:

1. Creating a WatchService object:


WatchService  watchService = FileSystems.getDefault().newWatchService();
2. Obtain a path reference to your watchable directory. I suggest you parameterize this directory so you don’t hard code the file name.


path= Paths.get("C:\Temp\temp\");
3. The next step is to register the directory with the WatchService for all types of events:


dirToWatch.register(watchService, ENTRY_CREATE, ENTRY_MODIFY,

ENTRY_DELETE);
These are java.nio.file.StandardWatchEventKinds event types

4. Initiate the infinite loop and start taking the events:


while(true)

{

    WatchKey key = watchService.take(); // this would return you keys

    �

}
5. Run through the events on the key:


for(WatchEvent<?> event : key.pollEvents()) {

            Kind<?> kind = event.kind();

System.out.println("Event on "+ event.context().toString() + " is "+ kind);

}
For example, if you modify or delete the temp directory, you would see statement as shown below on the console respectively:


Event on temp is ENTRY_MODIFY

Event on temp is ENTRY_DELETE
The relevant methods of the DirPolice source code are posted below (download the full source code):


/**

 * This initiates the police

 */

private voidinit() {

      path= Paths.get("C:\Temp\temp\");

      try{

            watchService= FileSystems.getDefault().newWatchService();

            path.register(watchService, ENTRY_CREATE, ENTRY_DELETE,

                        ENTRY_MODIFY);

      } catch(IOException e) {

            System.out.println("IOException"+ e.getMessage());

      }

}

/**

 * The police will start making rounds

 */

private voiddoRounds() {

      WatchKey key = null;

      while(true) {

            try{

                  key = watchService.take();

                  for(WatchEvent<?> event : key.pollEvents()) {

                        Kind<?> kind = event.kind();

System.out.println("Event on "+ event.context().toString() + " is " + kind);

                  }

            } catch(InterruptedException e) {

System.out.println("InterruptedException: "+e.getMessage());

            }

            booleanreset = key.reset();

            if(!reset)

                  break;

      }

}
Fork and Join
The effective use of parallel cores in a Java program has always been a challenge. There were few home-grown frameworks that would distribute the work across multiple cores and then join them to return the result set. Java 7 has incorporated this feature as a Fork and Join framework.

Basically the Fork-Join breaks the task at hand into mini-tasks until the mini-task is simple enough that it can be solved without further breakups. It’s like a divide-and-conquer algorithm. One important concept to note in this framework is that ideally no worker thread is idle. They implement a work-stealing algorithm in that idle workers “steal” the work from those workers who are busy.

The core classes supporting the Fork-Join mechanism are ForkJoinPool and ForkJoinTask. The ForkJoinPool is basically a specialized implementation of ExecutorService implementing the work-stealing algorithm we talked about above.

We create an instance of ForkJoinPool by providing the target parallelism level — the number of processors as shown below:


ForkJoinPool pool = new ForkJoinPool(numberOfProcessors)
Where numberOfProcessors = Runtime.getRunTime().availableProcessors();

However, the default ForkJoinPool instantiation would set the parallelism level equal to the same number obtained as above.

The problem that needs to be solved is coded in a ForkJoinTask. However, there are two implementations of this class out of the box: the RecursiveAction and RecursiveTask. The only difference between these two classes is that the former one does not return a value while the latter returns an object of specified type.

Here’s how to create a RecursiveAction or RecursiveTask class that represents your requirement problem (I use the RecursiveAction class):


public class MyBigProblemTask extends RecursiveAction {



    @Override

    protected void compute() {

        . . . // your problem invocation goes here

    }

}
You have to override the compute method where in you need to provide the computing functionality. Now, provide this ForkJoinTask to the Executor by calling invoke method on the ForkJoinPool:


pool.invoke(task);
Supporting dynamism
Java is a statically typed language — the type checking of the variables, methods and return values is performed at compile time. The JVM executes this strongly-typed bytecode at runtime without having to worry about finding the type information.

There’s another breed of typed languages — the dynamically typed languages. Ruby, Python and Clojure are in this category. The type information is unresolved until runtime in these languages. This is not possible in Java as it would not have any necessary type information.

There is an increasing pressure on Java folks improvise running the dynamic languages efficiently. Although it is possible to run these languages on a JVM (using Reflection), it’s not without constraints and restrictions.

In Java 7, a new feature called invokedynamic was introduced. This makes VM changes to incorporate non-Java language requirements. A new package, java.lang.invoke, consisting of classes such as MethodHandle, CallSite and others, has been created to extend the support of dynamic languages.

Wrapping up
As we’ve covered, Java 7 has a few bells and whistles that should put smiles on developers’ faces, and the open-source collaboration and support for dynamic languages via JVM extensions should also be well received by those outside the Java community.